{
  "name": "angular-generic",
  "version": "1.0.208",
  "license": "CC-BY-3.0",
  "description": "useful services, filters and directives for every project needs",
  "homepage": "http://torben.website/angularGeneric",
  "documentationWebsite": {
    "name": "angularGeneric",
    "trackingCode": "UA-40192634-16"
  },
  "keywords": [
    "angular",
    "generic",
    "tools"
  ],
  "files": [
    "index.js",
    "mockup.js",
    "mockup.compiled.js",
    "preRender.js",
    "preRender.compiled.js",
    "testRunner.js",
    "testRunner.compiled.js"
  ],
  "main": "index.compiled.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/angularGeneric"
  },
  "scripts": {
    "build": "webOptimizer build && npm run build:pre-render && npm run build:test",
    "build:dll": "webOptimizer build:dll",
    "build:pre-render": "babel --plugins angular2-annotations,transform-decorators-legacy,transform-flow-strip-types,transform-runtime --presets es2017-node7,stage-0 --source-maps inline --out-file preRender.compiled.js preRender.js",
    "build:test": "babel --plugins angular2-annotations,transform-decorators-legacy,transform-flow-strip-types --presets modern-browsers,es2017,stage-0 --source-maps inline --out-file testRunner.compiled.js testRunner.js",
    "clear": "webOptimizer clear",
    "document": "webOptimizer document",
    "export": "webOptimizer build '{development:{tool:false},module:{preprocessor:{javaScript:{options:{plugins:{__remove__:\"transform-runtime\"}}}}}}' && npm run build:tTest",
    "lint": "webOptimizer check:type; webOptimizer lint",
    "prepublish": "npm run build",
    "serve": "webOptimizer serve",
    "start": "npm run serve",
    "test": "webOptimizer test",
    "test:browser": "webOptimizer test:browser",
    "update": "npm version patch && npm publish",
    "update:documentation": "documentationWebsite --log-level info",
    "watch": "webOptimizer build --watch",
    "watch:dll": "webOptimizer build:dll --watch"
  },
  "dependencies": {
    "@angular/animations": "latest",
    "@angular/common": "latest",
    "@angular/compiler": "latest",
    "@angular/core": "latest",
    "@angular/forms": "latest",
    "@angular/http": "latest",
    "@angular/material": "latest",
    "@angular/platform-browser": "latest",
    "@angular/platform-browser-dynamic": "latest",
    "@angular/platform-server": "latest",
    "@angular/router": "latest",
    "angular-tinymce": "latest",
    "blob-util": "latest",
    "clientnode": "latest",
    "hammerjs": "latest",
    "jsdom": "latest",
    "mkdirp": "latest",
    "pouchdb": "latest",
    "pouchdb-adapter-memory": "latest",
    "pouchdb-find": "latest",
    "pouchdb-validation": "latest",
    "reflect-metadata": "^0.1.8",
    "rimraf": "latest",
    "rxjs": "^5.2.0",
    "zone.js": "^0.8.4"
  },
  "devDependencies": {
    "babel-plugin-angular2-annotations": "latest",
    "babel-plugin-transform-decorators-legacy": "latest",
    "documentation-website": "latest",
    "source-map-support": "latest",
    "weboptimizer": "latest"
  },
  "webOptimizer": {
    "injection": {
      "external": {
        "implicit": {
          "pattern": {
            "exclude": {
              "__append__": {
                "__evaluate__": "/^clientnode\\/test(?:\\.compiled)?(?:\\.js)?$/"
              }
            }
          }
        }
      },
      "internal": {
        "index": {
          "__evaluate__": "(self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'build' ? [] : ['reflect-metadata', 'zone.js']).concat(self.givenCommandLineArguments.length && ['build:dll', 'serve', 'test:browser', 'watch:dll'].includes(self.givenCommandLineArguments[2]) ? `webpack-dev-server/client?http${self.development.server.cert ? 's' : ''}://0.0.0.0:${self.development.server.port}` : []).concat(self.givenCommandLineArguments.length && ['test', 'test:browser'].includes(self.givenCommandLineArguments[2]) ? './test' : './index')"
        },
        "mockup": {
          "__evaluate__": "self.givenCommandLineArguments.length && ['test', 'test:browser'].includes(self.givenCommandLineArguments[2]) ? [] : './mockup'"
        },
        "vendor": {
          "__evaluate__": "self.debug && 2 < self.givenCommandLineArguments.length && ['build:dll', 'serve', 'test:browser', 'watch:dll'].includes(self.givenCommandLineArguments[2]) ? ['babel-polyfill', 'blob-util', 'hammerjs', 'reflect-metadata', 'zone.js', 'rxjs', '@angular/animations', '@angular/common', '@angular/core', '@angular/http', '@angular/material', '@angular/platform-browser', '@angular/platform-browser-dynamic', '@angular/router'].concat(self.givenCommandLineArguments[2] === 'serve' ? [] : ['script!qunitjs', 'weboptimizer/browserAPI', './mockup']) : []"
        }
      }
    },
    "module": {
      "aliases": {
        "clientnode/test$": "clientnode/test.compiled"
      },
      "optimizer": {
        "babili": null
      },
      "preprocessor": {
        "javaScript": {
          "options": {
            "plugins": {
              "__prepend__": [
                "angular2-annotations",
                "transform-decorators-legacy"
              ],
              "__remove__": "transform-runtime"
            },
            "presets": {
              "__evaluate__": "(self.targetTechnology === 'node' ? ['es2017-node7'] : [['modern-browsers', {loose: true}], 'es2017']).concat('stage-0')"
            }
          }
        }
      },
      "replacements": {
        "context": [
          [
            "/angular(\\\\|\\/)core(\\\\|\\/)(esm(\\\\|\\/)src|src)(\\\\|\\/)linker/",
            "__dirname"
          ]
        ],
        "normal": {
          "^angular-tinymce$": "angular-tinymce/bundles/angular-tinymce.umd.min.js",
          "^babel-polyfill$": "babel-polyfill/dist/polyfill.min.js",
          "^blob-util$": "blob-util/dist/blob-util.min.js",
          "^hammerjs$": "hammerjs/hammer.min.js",
          "^jquery$": "jquery/dist/jquery.min.js",
          "^pouchdb(?:/.+)?$": "pouchdb/dist/pouchdb.min.js",
          "^pouchdb-find(?:/.+)?$": "pouchdb-find/dist/pouchdb.pouchdb-find.min.js",
          "^DOESNT WORK: rxjs(?:/.+)?$": "rxjs/bundles/Rx.min.js",
          "^DOESNT WORK IN NODE: zone\\.js(?:/.+)?$": "zone.js/dist/zone.min.js"
        }
      },
      "skipParseRegularExpressions": {
        "__evaluate__": "/(?:^|\\/)(?:(?:babel-polyfill\\/dist\\/polyfill)|(?:hammerjs\\/hammer)|(?:jquery\\/dist\\/jquery)|(?:pouchdb\\/dist\\/pouchdb)|(?:pouchdb\\.find\\/dist\\/pouchdb\\.find)|(?:reflect-metadata\\/Reflect)|(?:rxjs\\/bundles\\/Rx)|(?:webpack\\/buildin\\/global)|(?:webpack\\/buildin\\/module)|(?:zone\\.js\\/dist\\/zone))(?:\\.min)?\\.js(?:\\?.+|$)/"
      }
    }
  }
}
